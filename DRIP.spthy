theory DRIP
begin
builtins: hashing, asymmetric-encryption, diffie-hellman, signing

functions: kdf/1

//////////////////////////////////////////
// Public Key Infrastructure (PKI)
//////////////////////////////////////////
rule create_identities:
  let 
    pubkey = 'g'^~privkey
  in 
  [Fr(~privkey)] --> [!Identity($A, ~privkey, pubkey), Out(pubkey)]


/*rule CA_init:
    [ Fr(~ltk) ]
    -->
    [
        !LtkCA(~ltk)
        , !PkCA(pk(~ltk))
        , Out(pk(~ltk)) 
    ] */

//////////////////////////////////////////
// HIP Base Exchange
//////////////////////////////////////////

rule initiator_1:
[!Identity($Initiator, ~initprivkey, initpubkey), !Identity($Responder, ~respprivkey, resppubkey)]
--[CreateI($Initiator, ~initprivkey, initpubkey)]-> 
[Out(<'trigger_packet', $Initiator, $Responder, h(initpubkey)>)]

rule responder_1:
     let 
        signResp = sign(<'responder_hello', $Responder, Initiator, resppubkey>, ~respprivkey)
     in
[!Identity($Responder, ~respprivkey, resppubkey), In(<'trigger_packet', Initiator, $Responder, h(initpubkey)>)] 
--[CreateR($Responder, ~respprivkey, resppubkey)]-> [Out(signResp)] // + puzzle?

rule initiator_2:
  let sesskey = resppubkey^~initprivkey
      signInit = sign(<'initiator_hello', $Initiator, Responder, initpubkey>, initprivkey)
  in
  [!Identity($Initiator, ~initprivkey, initpubkey), In(signResp)]  
  --[Eq(verify(signResp, <'responder_hello', $Responder, Initiator, resppubkey>, resppubkey), true), InitiatorCreateSession($Initiator, Responder, sesskey)]-> 
  [Session($Initiator, $Responder, sesskey), Out(signInit)] // + solution

rule responder_2:
  let 
    signStart = sign(<'responder_hello', $Responder, Initiator, resppubkey>, ~respprivkey)
    sesskey = initpubkey^~respprivkey
  in

  [!Identity($Responder, ~respprivkey, resppubkey), In(signInit)] 

  --[
    Eq(verify(signInit, <'initiator_hello', $Initiator, Responder, initpubkey>, initpubkey), true)
    , ResponderCreateSession($Responder, Initiator, sesskey)
  ]->

  [Session($Responder, $Initiator, sesskey), Out(signStart)]



//////////////////////////////////////////
// Register entity to registry
//////////////////////////////////////////

/*
rule operator_send_cert:
    [!Identity($Op, privkeyOp, pubkeyOp), !Identity($Reg, privkeyReg, pubkeyReg)]
      -->
    [Out(<'Operator_certificate', $Op, $Reg, sign>)] // send certificate?

*/

////////////////////////////////////////////////////////////////
//DRIP broadcast
///////////////////////////////////////////////////////////////

rule UA_broadcast_DET:
let hit = h(~id)
hhit = aenc(hit, privkeyDrone)
in
[Fr(~id), !Identity($Drone, privkeyDrone, pubkeyDrone),
!Identity($Observer, privkeyObs, pubkeyObs)]
--[CreateUA($Drone, ~id)]->
[Out(<'broadcast', hhit>)]

rule observer_receive_HHIT:
[!Identity($Observer, privkeyObs, pubkeyObs), In(<'broadcast', hhit>)]
--[
ObserverLookup($Observer, hhit),
Out(hhit),
In(pubkeyDrone) 
]->
[DecryptHHIT($Observer, privkeyObs, pubkeyObs, adec(hhit, pubkeyDrone))]

rule registry_send_pubkey:
[!Identity($Registry, privkeyDrone, pubkeyDrone), In(hhit)]
--[
RegistrySendPubkey($Registry, privkeyDrone, pubkeyDrone, hhit)
]->
[Out(pubkeyDrone)]

rule register_drone:
let
encpriv = aenc(privkeyDrone, sesskey2)
in
[!Identity($Registry, privkeyReg, pubkeyReg),
!Identity($Drone, privkeyDrone, pubkeyDrone),
Session($Registry, $Drone, sesskey1), Session($Drone, $Registry, sesskey2)]
--[
RegisterDrone($Registry, $Drone, privkeyDrone, pubkeyDrone)
]->
[Out(<encpriv, pubkeyDrone>)]





/*
The drone's private key can not be known by an adversary
*/
/*lemma DET_verify:
 "
 All $Registry privkeyDrone pubkeyDrone hhit #i.
 (
 	RegistrySendPubkey($Registry, privkeyDrone, pubkeyDrone, hhit) @ #i &
 	not (Ex C #r . PrivkeyReveal(C) @ #r)


 	)==> not(Ex #j . K(privkeyDrone) @ #j)
 "
 */

 lemma DET_verify:
 "
 All Registry sesskey1 Drone privkeyDrone pubkeyDrone id hhit sesskey2
 Observer #i #j #k #l #m #n.
 (
 	InitiatorCreateSession(Drone, Registry, sesskey2) @ #i &
 	ResponderCreateSession(Registry, Drone, sesskey1) @ #j &
 	CreateUA(Drone, id) @ #k &
 	RegisterDrone(Registry, Drone, privkeyDrone, pubkeyDrone) @ #l &
 	ObserverLookup(Observer, hhit) @ #m &
 	RegistrySendPubkey(Registry, privkeyDrone, pubkeyDrone, hhit) @ #n &
 	not (Ex C #r . PrivkeyReveal(C) @ #r)

 	)==> not(Ex #o . K(privkeyDrone) @ #o)
 "


//////////////////////////////////////////
// Attacker
//////////////////////////////////////////


rule Reveal_privkey:
    [ !Privkey(A, privkey) ]
  --[ PrivkeyReveal(A) ]->
    [ Out(privkey)]

//////////////////////////////////////////
restriction Equality:
    "All x y #i. Eq(x,y) @i ==> x = y"

//////////////////////////////////////////

lemma MITM:
"
All Initiator Responder sesskey1 sesskey2 #i #j.
  (
    InitiatorCreateSession(Initiator, Responder, sesskey1) @ #i &
    ResponderCreateSession(Responder, Initiator, sesskey2)  @ #j &
    #j < #i & 
    not (Initiator = Responder) 
    & not (Ex C #r . PrivkeyReveal(C) @ #r)
  )
    ==> not(Ex #k1 #k2 . K(sesskey1) @ #k1 & K(sesskey2) @ #k2)
"

//verify that the protocol fully runs through

lemma executable:
  
  exists-trace
"Ex I R sesskey1 sesskey2 D id Re pkD pD hhit #i #j #k #l #m.
InitiatorCreateSession(I, R, sesskey1) @ #i &
ResponderCreateSession(R, I, sesskey2) @ #j & 
CreateUA(D, id) @ #k & 
RegisterDrone(R, D, pD, pkD) @ #l &
RegistrySendPubkey(Re, pD, pkD, hhit) @ #m"

end





